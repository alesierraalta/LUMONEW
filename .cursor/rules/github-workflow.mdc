---
alwaysApply: true
---

# GitHub Workflow Guide

This project follows a `main`/`dev` branching strategy for development and production deployments.

## ⚠️ CRITICAL RULE: NEVER work directly on main branch!

**Branch Structure:**
- **`main`**: This branch is strictly for production deployments. All changes to `main` must come from a pull request from `dev` and require approvals and passing CI/CD checks. Direct pushes to `main` are forbidden.
- **`dev`**: This branch is for active development and testing. Features are merged into `dev` for integration testing. Changes to `dev` should ideally come from feature branches via pull requests.

## Development Process:
1. **Feature Branches**: Create new branches from `dev` for each new feature or bug fix (e.g., `feature/my-new-feature`, `bugfix/issue-123`).
2. **Pull Requests to `dev`**: Once a feature is complete and tested locally, open a pull request from your feature branch to `dev`. This PR will trigger `pr-checks.yml` and `dev-deploy.yml`.
3. **Review and Merge to `dev`**: After code review and passing all automated checks, merge the feature branch into `dev`. This will trigger a deployment to the development environment.
4. **Release to `main`**: When `dev` is stable and ready for a production release, open a pull request from `dev` to `main`. This PR will trigger `pr-checks.yml` and `prod-deploy.yml`.
5. **Production Deployment**: After thorough review and approval, merge the `dev` branch into `main`. This will automatically trigger the production deployment.

## Commit Conventions:
- Use [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) for clear commit history (e.g., `feat: add new inventory item`, `fix: correct login bug`).

## Emergency Hotfixes:
- For critical production bugs, a hotfix branch can be created directly from `main`.
- The hotfix should be merged back into `main` (triggering a production deployment) and then also merged into `dev` to keep branches in sync.

## Daily Development Commands:
```bash
# Start your day
git checkout dev
git pull origin dev

# Create feature branch
git checkout -b feature/descriptive-name

# Make changes and commit
git add .
git commit -m "feat: descriptive message"

# Push and create PR to dev (NOT main!)
git push origin feature/descriptive-name
```

## Relevant Files:
- [`.github/workflows/ci.yml`](mdc:.github/workflows/ci.yml): Core CI checks for all branches.
- [`.github/workflows/dev-deploy.yml`](mdc:.github/workflows/dev-deploy.yml): Development environment deployment.
- [`.github/workflows/prod-deploy.yml`](mdc:.github/workflows/prod-deploy.yml): Production environment deployment.
- [`.github/workflows/pr-checks.yml`](mdc:.github/workflows/pr-checks.yml): Pull request validation checks.
- [`scripts/fix-github-workflow.js`](mdc:scripts/fix-github-workflow.js): Script to configure branch protection rules.
- [`docs/CORRECT_GITHUB_WORKFLOW.md`](mdc:docs/CORRECT_GITHUB_WORKFLOW.md): Detailed workflow documentation.
- [`GITHUB_WORKFLOW_QUICK_REFERENCE.md`](mdc:GITHUB_WORKFLOW_QUICK_REFERENCE.md): Quick reference guide.